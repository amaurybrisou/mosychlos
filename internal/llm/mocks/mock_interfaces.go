// Code generated by MockGen. DO NOT EDIT.
// Source: internal/llm/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/amaurybrisou/mosychlos/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockResponsesStrategyInterface is a mock of ResponsesStrategyInterface interface.
type MockResponsesStrategyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResponsesStrategyInterfaceMockRecorder
}

// MockResponsesStrategyInterfaceMockRecorder is the mock recorder for MockResponsesStrategyInterface.
type MockResponsesStrategyInterfaceMockRecorder struct {
	mock *MockResponsesStrategyInterface
}

// NewMockResponsesStrategyInterface creates a new mock instance.
func NewMockResponsesStrategyInterface(ctrl *gomock.Controller) *MockResponsesStrategyInterface {
	mock := &MockResponsesStrategyInterface{ctrl: ctrl}
	mock.recorder = &MockResponsesStrategyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponsesStrategyInterface) EXPECT() *MockResponsesStrategyInterfaceMockRecorder {
	return m.recorder
}

// Ask mocks base method.
func (m *MockResponsesStrategyInterface) Ask(ctx context.Context, req models.PromptRequest) (*models.LLMResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask", ctx, req)
	ret0, _ := ret[0].(*models.LLMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ask indicates an expected call of Ask.
func (mr *MockResponsesStrategyInterfaceMockRecorder) Ask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockResponsesStrategyInterface)(nil).Ask), ctx, req)
}

// AskStream mocks base method.
func (m *MockResponsesStrategyInterface) AskStream(ctx context.Context, req models.PromptRequest) (<-chan models.StreamChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskStream", ctx, req)
	ret0, _ := ret[0].(<-chan models.StreamChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskStream indicates an expected call of AskStream.
func (mr *MockResponsesStrategyInterfaceMockRecorder) AskStream(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskStream", reflect.TypeOf((*MockResponsesStrategyInterface)(nil).AskStream), ctx, req)
}

// RegisterTool mocks base method.
func (m *MockResponsesStrategyInterface) RegisterTool(t models.Tool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterTool", t)
}

// RegisterTool indicates an expected call of RegisterTool.
func (mr *MockResponsesStrategyInterfaceMockRecorder) RegisterTool(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTool", reflect.TypeOf((*MockResponsesStrategyInterface)(nil).RegisterTool), t)
}

// SetToolConsumer mocks base method.
func (m *MockResponsesStrategyInterface) SetToolConsumer(c models.ToolConsumer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToolConsumer", c)
}

// SetToolConsumer indicates an expected call of SetToolConsumer.
func (mr *MockResponsesStrategyInterfaceMockRecorder) SetToolConsumer(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToolConsumer", reflect.TypeOf((*MockResponsesStrategyInterface)(nil).SetToolConsumer), c)
}
