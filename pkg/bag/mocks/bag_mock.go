// Code generated by MockGen. DO NOT EDIT.
// Source: bag.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bag "github.com/amaurybrisou/mosychlos/pkg/bag"
	keys "github.com/amaurybrisou/mosychlos/pkg/keys"
	gomock "github.com/golang/mock/gomock"
)

// MockBag is a mock of Bag interface.
type MockBag struct {
	ctrl     *gomock.Controller
	recorder *MockBagMockRecorder
}

// MockBagMockRecorder is the mock recorder for MockBag.
type MockBagMockRecorder struct {
	mock *MockBag
}

// NewMockBag creates a new mock instance.
func NewMockBag(ctrl *gomock.Controller) *MockBag {
	mock := &MockBag{ctrl: ctrl}
	mock.recorder = &MockBagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBag) EXPECT() *MockBagMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBag) Get(k keys.Key) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBagMockRecorder) Get(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBag)(nil).Get), k)
}

// GetAs mocks base method.
func (m *MockBag) GetAs(k keys.Key, out any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAs", k, out)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetAs indicates an expected call of GetAs.
func (mr *MockBagMockRecorder) GetAs(k, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAs", reflect.TypeOf((*MockBag)(nil).GetAs), k, out)
}

// Has mocks base method.
func (m *MockBag) Has(k keys.Key) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", k)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockBagMockRecorder) Has(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockBag)(nil).Has), k)
}

// Keys mocks base method.
func (m *MockBag) Keys() []keys.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]keys.Key)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockBagMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockBag)(nil).Keys))
}

// Len mocks base method.
func (m *MockBag) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockBagMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockBag)(nil).Len))
}

// Set mocks base method.
func (m *MockBag) Set(k keys.Key, v any) bag.Bag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", k, v)
	ret0, _ := ret[0].(bag.Bag)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockBagMockRecorder) Set(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBag)(nil).Set), k, v)
}
