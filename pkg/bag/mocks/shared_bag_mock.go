// Code generated by MockGen. DO NOT EDIT.
// Source: shared_bag.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bag "github.com/amaurybrisou/mosychlos/pkg/bag"
	gomock "github.com/golang/mock/gomock"
)

// MockSharedBag is a mock of SharedBag interface.
type MockSharedBag struct {
	ctrl     *gomock.Controller
	recorder *MockSharedBagMockRecorder
}

// MockSharedBagMockRecorder is the mock recorder for MockSharedBag.
type MockSharedBagMockRecorder struct {
	mock *MockSharedBag
}

// NewMockSharedBag creates a new mock instance.
func NewMockSharedBag(ctrl *gomock.Controller) *MockSharedBag {
	mock := &MockSharedBag{ctrl: ctrl}
	mock.recorder = &MockSharedBagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedBag) EXPECT() *MockSharedBagMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSharedBag) Get(k bag.Key) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSharedBagMockRecorder) Get(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSharedBag)(nil).Get), k)
}

// GetAs mocks base method.
func (m *MockSharedBag) GetAs(k bag.Key, out any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAs", k, out)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetAs indicates an expected call of GetAs.
func (mr *MockSharedBagMockRecorder) GetAs(k, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAs", reflect.TypeOf((*MockSharedBag)(nil).GetAs), k, out)
}

// Has mocks base method.
func (m *MockSharedBag) Has(k bag.Key) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", k)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockSharedBagMockRecorder) Has(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockSharedBag)(nil).Has), k)
}

// MarshalJSON mocks base method.
func (m *MockSharedBag) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON.
func (mr *MockSharedBagMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSharedBag)(nil).MarshalJSON))
}

// MustGet mocks base method.
func (m *MockSharedBag) MustGet(k bag.Key) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGet", k)
	ret0, _ := ret[0].(any)
	return ret0
}

// MustGet indicates an expected call of MustGet.
func (mr *MockSharedBagMockRecorder) MustGet(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGet", reflect.TypeOf((*MockSharedBag)(nil).MustGet), k)
}

// Set mocks base method.
func (m *MockSharedBag) Set(k bag.Key, v any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", k, v)
}

// Set indicates an expected call of Set.
func (mr *MockSharedBagMockRecorder) Set(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSharedBag)(nil).Set), k, v)
}

// Snapshot mocks base method.
func (m *MockSharedBag) Snapshot() bag.Bag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(bag.Bag)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockSharedBagMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockSharedBag)(nil).Snapshot))
}

// Update mocks base method.
func (m *MockSharedBag) Update(k bag.Key, fn func(any) any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", k, fn)
}

// Update indicates an expected call of Update.
func (mr *MockSharedBagMockRecorder) Update(k, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSharedBag)(nil).Update), k, fn)
}
