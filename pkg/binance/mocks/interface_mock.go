// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/amaurybrisou/mosychlos/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccountInfo mocks base method.
func (m *MockClient) GetAccountInfo(ctx context.Context) (*models.BinanceAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfo", ctx)
	ret0, _ := ret[0].(*models.BinanceAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfo indicates an expected call of GetAccountInfo.
func (mr *MockClientMockRecorder) GetAccountInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfo", reflect.TypeOf((*MockClient)(nil).GetAccountInfo), ctx)
}

// GetAllTickers24hr mocks base method.
func (m *MockClient) GetAllTickers24hr(ctx context.Context) ([]*models.BinanceTicker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTickers24hr", ctx)
	ret0, _ := ret[0].([]*models.BinanceTicker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTickers24hr indicates an expected call of GetAllTickers24hr.
func (mr *MockClientMockRecorder) GetAllTickers24hr(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTickers24hr", reflect.TypeOf((*MockClient)(nil).GetAllTickers24hr), ctx)
}

// GetKlines mocks base method.
func (m *MockClient) GetKlines(ctx context.Context, symbol, interval string, limit int, startTime, endTime *time.Time) ([]*models.BinanceKline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKlines", ctx, symbol, interval, limit, startTime, endTime)
	ret0, _ := ret[0].([]*models.BinanceKline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKlines indicates an expected call of GetKlines.
func (mr *MockClientMockRecorder) GetKlines(ctx, symbol, interval, limit, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKlines", reflect.TypeOf((*MockClient)(nil).GetKlines), ctx, symbol, interval, limit, startTime, endTime)
}

// GetPrice mocks base method.
func (m *MockClient) GetPrice(ctx context.Context, symbol string) (*models.BinancePriceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", ctx, symbol)
	ret0, _ := ret[0].(*models.BinancePriceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockClientMockRecorder) GetPrice(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockClient)(nil).GetPrice), ctx, symbol)
}

// GetPrices mocks base method.
func (m *MockClient) GetPrices(ctx context.Context, symbols []string) ([]*models.BinancePriceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrices", ctx, symbols)
	ret0, _ := ret[0].([]*models.BinancePriceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrices indicates an expected call of GetPrices.
func (mr *MockClientMockRecorder) GetPrices(ctx, symbols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrices", reflect.TypeOf((*MockClient)(nil).GetPrices), ctx, symbols)
}

// GetTicker24hr mocks base method.
func (m *MockClient) GetTicker24hr(ctx context.Context, symbol string) (*models.BinanceTicker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicker24hr", ctx, symbol)
	ret0, _ := ret[0].(*models.BinanceTicker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicker24hr indicates an expected call of GetTicker24hr.
func (mr *MockClientMockRecorder) GetTicker24hr(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicker24hr", reflect.TypeOf((*MockClient)(nil).GetTicker24hr), ctx, symbol)
}

// MockPortfolioProvider is a mock of PortfolioProvider interface.
type MockPortfolioProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPortfolioProviderMockRecorder
}

// MockPortfolioProviderMockRecorder is the mock recorder for MockPortfolioProvider.
type MockPortfolioProviderMockRecorder struct {
	mock *MockPortfolioProvider
}

// NewMockPortfolioProvider creates a new mock instance.
func NewMockPortfolioProvider(ctrl *gomock.Controller) *MockPortfolioProvider {
	mock := &MockPortfolioProvider{ctrl: ctrl}
	mock.recorder = &MockPortfolioProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortfolioProvider) EXPECT() *MockPortfolioProviderMockRecorder {
	return m.recorder
}

// GetSpotPortfolio mocks base method.
func (m *MockPortfolioProvider) GetSpotPortfolio(ctx context.Context) (*models.BinancePortfolioData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpotPortfolio", ctx)
	ret0, _ := ret[0].(*models.BinancePortfolioData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpotPortfolio indicates an expected call of GetSpotPortfolio.
func (mr *MockPortfolioProviderMockRecorder) GetSpotPortfolio(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpotPortfolio", reflect.TypeOf((*MockPortfolioProvider)(nil).GetSpotPortfolio), ctx)
}
