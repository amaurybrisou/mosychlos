// Code generated by MockGen. DO NOT EDIT.
// Source: ai_batch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	models "github.com/amaurybrisou/mosychlos/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAiBatchClient is a mock of AiBatchClient interface.
type MockAiBatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockAiBatchClientMockRecorder
}

// MockAiBatchClientMockRecorder is the mock recorder for MockAiBatchClient.
type MockAiBatchClientMockRecorder struct {
	mock *MockAiBatchClient
}

// NewMockAiBatchClient creates a new mock instance.
func NewMockAiBatchClient(ctrl *gomock.Controller) *MockAiBatchClient {
	mock := &MockAiBatchClient{ctrl: ctrl}
	mock.recorder = &MockAiBatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAiBatchClient) EXPECT() *MockAiBatchClientMockRecorder {
	return m.recorder
}

// CancelBatch mocks base method.
func (m *MockAiBatchClient) CancelBatch(ctx context.Context, jobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBatch", ctx, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelBatch indicates an expected call of CancelBatch.
func (mr *MockAiBatchClientMockRecorder) CancelBatch(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBatch", reflect.TypeOf((*MockAiBatchClient)(nil).CancelBatch), ctx, jobID)
}

// GetBatchErrors mocks base method.
func (m *MockAiBatchClient) GetBatchErrors(ctx context.Context, jobID string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchErrors", ctx, jobID)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchErrors indicates an expected call of GetBatchErrors.
func (mr *MockAiBatchClientMockRecorder) GetBatchErrors(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchErrors", reflect.TypeOf((*MockAiBatchClient)(nil).GetBatchErrors), ctx, jobID)
}

// GetBatchResults mocks base method.
func (m *MockAiBatchClient) GetBatchResults(ctx context.Context, jobID string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchResults", ctx, jobID)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchResults indicates an expected call of GetBatchResults.
func (mr *MockAiBatchClientMockRecorder) GetBatchResults(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchResults", reflect.TypeOf((*MockAiBatchClient)(nil).GetBatchResults), ctx, jobID)
}

// GetBatchStatus mocks base method.
func (m *MockAiBatchClient) GetBatchStatus(ctx context.Context, jobID string) (*models.BatchJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchStatus", ctx, jobID)
	ret0, _ := ret[0].(*models.BatchJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchStatus indicates an expected call of GetBatchStatus.
func (mr *MockAiBatchClientMockRecorder) GetBatchStatus(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchStatus", reflect.TypeOf((*MockAiBatchClient)(nil).GetBatchStatus), ctx, jobID)
}

// ListBatches mocks base method.
func (m *MockAiBatchClient) ListBatches(ctx context.Context, filters map[string]string) ([]models.BatchJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatches", ctx, filters)
	ret0, _ := ret[0].([]models.BatchJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatches indicates an expected call of ListBatches.
func (mr *MockAiBatchClientMockRecorder) ListBatches(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatches", reflect.TypeOf((*MockAiBatchClient)(nil).ListBatches), ctx, filters)
}

// SubmitBatch mocks base method.
func (m *MockAiBatchClient) SubmitBatch(ctx context.Context, reqs []models.BatchRequest, opts models.BatchOptions) (*models.BatchJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBatch", ctx, reqs, opts)
	ret0, _ := ret[0].(*models.BatchJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitBatch indicates an expected call of SubmitBatch.
func (mr *MockAiBatchClientMockRecorder) SubmitBatch(ctx, reqs, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBatch", reflect.TypeOf((*MockAiBatchClient)(nil).SubmitBatch), ctx, reqs, opts)
}

// MockBatchManager is a mock of BatchManager interface.
type MockBatchManager struct {
	ctrl     *gomock.Controller
	recorder *MockBatchManagerMockRecorder
}

// MockBatchManagerMockRecorder is the mock recorder for MockBatchManager.
type MockBatchManagerMockRecorder struct {
	mock *MockBatchManager
}

// NewMockBatchManager creates a new mock instance.
func NewMockBatchManager(ctrl *gomock.Controller) *MockBatchManager {
	mock := &MockBatchManager{ctrl: ctrl}
	mock.recorder = &MockBatchManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchManager) EXPECT() *MockBatchManagerMockRecorder {
	return m.recorder
}

// CancelJob mocks base method.
func (m *MockBatchManager) CancelJob(ctx context.Context, jobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", ctx, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelJob indicates an expected call of CancelJob.
func (mr *MockBatchManagerMockRecorder) CancelJob(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockBatchManager)(nil).CancelJob), ctx, jobID)
}

// EstimateCost mocks base method.
func (m *MockBatchManager) EstimateCost(requests []models.BatchRequest) *models.CostEstimate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateCost", requests)
	ret0, _ := ret[0].(*models.CostEstimate)
	return ret0
}

// EstimateCost indicates an expected call of EstimateCost.
func (mr *MockBatchManagerMockRecorder) EstimateCost(requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateCost", reflect.TypeOf((*MockBatchManager)(nil).EstimateCost), requests)
}

// GetError mocks base method.
func (m *MockBatchManager) GetError(ctx context.Context, jobID string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetError", ctx, jobID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetError indicates an expected call of GetError.
func (mr *MockBatchManagerMockRecorder) GetError(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockBatchManager)(nil).GetError), ctx, jobID)
}

// GetJobStatus mocks base method.
func (m *MockBatchManager) GetJobStatus(ctx context.Context, jobID string) (*models.BatchJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobStatus", ctx, jobID)
	ret0, _ := ret[0].(*models.BatchJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobStatus indicates an expected call of GetJobStatus.
func (mr *MockBatchManagerMockRecorder) GetJobStatus(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStatus", reflect.TypeOf((*MockBatchManager)(nil).GetJobStatus), ctx, jobID)
}

// GetResults mocks base method.
func (m *MockBatchManager) GetResults(ctx context.Context, jobID string) (*models.BatchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", ctx, jobID)
	ret0, _ := ret[0].(*models.BatchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockBatchManagerMockRecorder) GetResults(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockBatchManager)(nil).GetResults), ctx, jobID)
}

// ListBatches mocks base method.
func (m *MockBatchManager) ListBatches(ctx context.Context, filters map[string]string) ([]models.BatchJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatches", ctx, filters)
	ret0, _ := ret[0].([]models.BatchJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatches indicates an expected call of ListBatches.
func (mr *MockBatchManagerMockRecorder) ListBatches(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatches", reflect.TypeOf((*MockBatchManager)(nil).ListBatches), ctx, filters)
}

// ProcessBatch mocks base method.
func (m *MockBatchManager) ProcessBatch(ctx context.Context, requests []models.BatchRequest, opts models.BatchOptions, waitForCompletion bool) (*models.BatchJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBatch", ctx, requests, opts, waitForCompletion)
	ret0, _ := ret[0].(*models.BatchJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessBatch indicates an expected call of ProcessBatch.
func (mr *MockBatchManagerMockRecorder) ProcessBatch(ctx, requests, opts, waitForCompletion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBatch", reflect.TypeOf((*MockBatchManager)(nil).ProcessBatch), ctx, requests, opts, waitForCompletion)
}

// SetPollDelay mocks base method.
func (m *MockBatchManager) SetPollDelay(delay time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPollDelay", delay)
}

// SetPollDelay indicates an expected call of SetPollDelay.
func (mr *MockBatchManagerMockRecorder) SetPollDelay(delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPollDelay", reflect.TypeOf((*MockBatchManager)(nil).SetPollDelay), delay)
}

// WaitForCompletion mocks base method.
func (m *MockBatchManager) WaitForCompletion(ctx context.Context, jobID string) (*models.BatchJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCompletion", ctx, jobID)
	ret0, _ := ret[0].(*models.BatchJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForCompletion indicates an expected call of WaitForCompletion.
func (mr *MockBatchManagerMockRecorder) WaitForCompletion(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletion", reflect.TypeOf((*MockBatchManager)(nil).WaitForCompletion), ctx, jobID)
}
