// Code generated by MockGen. DO NOT EDIT.
// Source: ai.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	bag "github.com/amaurybrisou/mosychlos/pkg/bag"
	models "github.com/amaurybrisou/mosychlos/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockToolDef is a mock of ToolDef interface.
type MockToolDef struct {
	ctrl     *gomock.Controller
	recorder *MockToolDefMockRecorder
}

// MockToolDefMockRecorder is the mock recorder for MockToolDef.
type MockToolDefMockRecorder struct {
	mock *MockToolDef
}

// NewMockToolDef creates a new mock instance.
func NewMockToolDef(ctrl *gomock.Controller) *MockToolDef {
	mock := &MockToolDef{ctrl: ctrl}
	mock.recorder = &MockToolDefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolDef) EXPECT() *MockToolDefMockRecorder {
	return m.recorder
}

// ToAny mocks base method.
func (m *MockToolDef) ToAny() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToAny")
	ret0, _ := ret[0].(any)
	return ret0
}

// ToAny indicates an expected call of ToAny.
func (mr *MockToolDefMockRecorder) ToAny() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToAny", reflect.TypeOf((*MockToolDef)(nil).ToAny))
}

// MockTool is a mock of Tool interface.
type MockTool struct {
	ctrl     *gomock.Controller
	recorder *MockToolMockRecorder
}

// MockToolMockRecorder is the mock recorder for MockTool.
type MockToolMockRecorder struct {
	mock *MockTool
}

// NewMockTool creates a new mock instance.
func NewMockTool(ctrl *gomock.Controller) *MockTool {
	mock := &MockTool{ctrl: ctrl}
	mock.recorder = &MockToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTool) EXPECT() *MockToolMockRecorder {
	return m.recorder
}

// Definition mocks base method.
func (m *MockTool) Definition() models.ToolDef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Definition")
	ret0, _ := ret[0].(models.ToolDef)
	return ret0
}

// Definition indicates an expected call of Definition.
func (mr *MockToolMockRecorder) Definition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Definition", reflect.TypeOf((*MockTool)(nil).Definition))
}

// Description mocks base method.
func (m *MockTool) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockToolMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockTool)(nil).Description))
}

// IsExternal mocks base method.
func (m *MockTool) IsExternal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExternal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExternal indicates an expected call of IsExternal.
func (mr *MockToolMockRecorder) IsExternal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExternal", reflect.TypeOf((*MockTool)(nil).IsExternal))
}

// Key mocks base method.
func (m *MockTool) Key() bag.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(bag.Key)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockToolMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockTool)(nil).Key))
}

// Name mocks base method.
func (m *MockTool) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockToolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTool)(nil).Name))
}

// Run mocks base method.
func (m *MockTool) Run(ctx context.Context, args string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockToolMockRecorder) Run(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTool)(nil).Run), ctx, args)
}

// Tags mocks base method.
func (m *MockTool) Tags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Tags indicates an expected call of Tags.
func (mr *MockToolMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockTool)(nil).Tags))
}

// MockRoleContent is a mock of RoleContent interface.
type MockRoleContent struct {
	ctrl     *gomock.Controller
	recorder *MockRoleContentMockRecorder
}

// MockRoleContentMockRecorder is the mock recorder for MockRoleContent.
type MockRoleContentMockRecorder struct {
	mock *MockRoleContent
}

// NewMockRoleContent creates a new mock instance.
func NewMockRoleContent(ctrl *gomock.Controller) *MockRoleContent {
	mock := &MockRoleContent{ctrl: ctrl}
	mock.recorder = &MockRoleContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleContent) EXPECT() *MockRoleContentMockRecorder {
	return m.recorder
}

// GetContent mocks base method.
func (m *MockRoleContent) GetContent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContent indicates an expected call of GetContent.
func (mr *MockRoleContentMockRecorder) GetContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockRoleContent)(nil).GetContent))
}

// GetRole mocks base method.
func (m *MockRoleContent) GetRole() models.Role {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole")
	ret0, _ := ret[0].(models.Role)
	return ret0
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRoleContentMockRecorder) GetRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRoleContent)(nil).GetRole))
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSession) Add(role models.Role, content string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", role, content)
}

// Add indicates an expected call of Add.
func (mr *MockSessionMockRecorder) Add(role, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSession)(nil).Add), role, content)
}

// AddFunctionCallResult mocks base method.
func (m *MockSession) AddFunctionCallResult(toolCall models.ToolCall, content string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFunctionCallResult", toolCall, content)
}

// AddFunctionCallResult indicates an expected call of AddFunctionCallResult.
func (mr *MockSessionMockRecorder) AddFunctionCallResult(toolCall, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFunctionCallResult", reflect.TypeOf((*MockSession)(nil).AddFunctionCallResult), toolCall, content)
}

// AddToolResult mocks base method.
func (m *MockSession) AddToolResult(toolCall models.ToolCall, content string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToolResult", toolCall, content)
}

// AddToolResult indicates an expected call of AddToolResult.
func (mr *MockSessionMockRecorder) AddToolResult(toolCall, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToolResult", reflect.TypeOf((*MockSession)(nil).AddToolResult), toolCall, content)
}

// Next mocks base method.
func (m *MockSession) Next(ctx context.Context, tools []models.ToolDef, rf *models.ResponseFormat) (*models.AssistantTurn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx, tools, rf)
	ret0, _ := ret[0].(*models.AssistantTurn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockSessionMockRecorder) Next(ctx, tools, rf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSession)(nil).Next), ctx, tools, rf)
}

// NextStream mocks base method.
func (m *MockSession) NextStream(ctx context.Context, tools []models.ToolDef, rf *models.ResponseFormat) (<-chan models.StreamChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextStream", ctx, tools, rf)
	ret0, _ := ret[0].(<-chan models.StreamChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextStream indicates an expected call of NextStream.
func (mr *MockSessionMockRecorder) NextStream(ctx, tools, rf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextStream", reflect.TypeOf((*MockSession)(nil).NextStream), ctx, tools, rf)
}

// SetToolChoice mocks base method.
func (m *MockSession) SetToolChoice(t *models.ToolChoice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToolChoice", t)
}

// SetToolChoice indicates an expected call of SetToolChoice.
func (mr *MockSessionMockRecorder) SetToolChoice(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToolChoice", reflect.TypeOf((*MockSession)(nil).SetToolChoice), t)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Embedding mocks base method.
func (m *MockProvider) Embedding(ctx context.Context, text string) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Embedding", ctx, text)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Embedding indicates an expected call of Embedding.
func (mr *MockProviderMockRecorder) Embedding(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Embedding", reflect.TypeOf((*MockProvider)(nil).Embedding), ctx, text)
}

// Name mocks base method.
func (m *MockProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProvider)(nil).Name))
}

// NewSession mocks base method.
func (m *MockProvider) NewSession() models.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession")
	ret0, _ := ret[0].(models.Session)
	return ret0
}

// NewSession indicates an expected call of NewSession.
func (mr *MockProviderMockRecorder) NewSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockProvider)(nil).NewSession))
}

// MockAiClient is a mock of AiClient interface.
type MockAiClient struct {
	ctrl     *gomock.Controller
	recorder *MockAiClientMockRecorder
}

// MockAiClientMockRecorder is the mock recorder for MockAiClient.
type MockAiClientMockRecorder struct {
	mock *MockAiClient
}

// NewMockAiClient creates a new mock instance.
func NewMockAiClient(ctrl *gomock.Controller) *MockAiClient {
	mock := &MockAiClient{ctrl: ctrl}
	mock.recorder = &MockAiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAiClient) EXPECT() *MockAiClientMockRecorder {
	return m.recorder
}

// Ask mocks base method.
func (m *MockAiClient) Ask(ctx context.Context, req models.PromptRequest) (*models.LLMResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask", ctx, req)
	ret0, _ := ret[0].(*models.LLMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ask indicates an expected call of Ask.
func (mr *MockAiClientMockRecorder) Ask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockAiClient)(nil).Ask), ctx, req)
}

// AskStream mocks base method.
func (m *MockAiClient) AskStream(ctx context.Context, req models.PromptRequest) (<-chan models.StreamChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskStream", ctx, req)
	ret0, _ := ret[0].(<-chan models.StreamChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskStream indicates an expected call of AskStream.
func (mr *MockAiClientMockRecorder) AskStream(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskStream", reflect.TypeOf((*MockAiClient)(nil).AskStream), ctx, req)
}

// BatchManager mocks base method.
func (m *MockAiClient) BatchManager() models.BatchManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchManager")
	ret0, _ := ret[0].(models.BatchManager)
	return ret0
}

// BatchManager indicates an expected call of BatchManager.
func (mr *MockAiClientMockRecorder) BatchManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchManager", reflect.TypeOf((*MockAiClient)(nil).BatchManager))
}

// DoBatch mocks base method.
func (m *MockAiClient) DoBatch(ctx context.Context, reqs []models.PromptRequest) (*models.BatchJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoBatch", ctx, reqs)
	ret0, _ := ret[0].(*models.BatchJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoBatch indicates an expected call of DoBatch.
func (mr *MockAiClientMockRecorder) DoBatch(ctx, reqs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoBatch", reflect.TypeOf((*MockAiClient)(nil).DoBatch), ctx, reqs)
}

// DoSync mocks base method.
func (m *MockAiClient) DoSync(ctx context.Context, req models.PromptRequest) (*models.LLMResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSync", ctx, req)
	ret0, _ := ret[0].(*models.LLMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSync indicates an expected call of DoSync.
func (mr *MockAiClientMockRecorder) DoSync(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSync", reflect.TypeOf((*MockAiClient)(nil).DoSync), ctx, req)
}

// RegisterTool mocks base method.
func (m *MockAiClient) RegisterTool(t ...models.Tool) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range t {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterTool", varargs...)
}

// RegisterTool indicates an expected call of RegisterTool.
func (mr *MockAiClientMockRecorder) RegisterTool(t ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTool", reflect.TypeOf((*MockAiClient)(nil).RegisterTool), t...)
}

// SetToolConsumer mocks base method.
func (m *MockAiClient) SetToolConsumer(consumer models.ToolConsumer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToolConsumer", consumer)
}

// SetToolConsumer indicates an expected call of SetToolConsumer.
func (mr *MockAiClientMockRecorder) SetToolConsumer(consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToolConsumer", reflect.TypeOf((*MockAiClient)(nil).SetToolConsumer), consumer)
}
