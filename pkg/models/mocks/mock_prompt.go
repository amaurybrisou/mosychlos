// Code generated by MockGen. DO NOT EDIT.
// Source: prompt.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/amaurybrisou/mosychlos/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPromptBuilder is a mock of PromptBuilder interface.
type MockPromptBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockPromptBuilderMockRecorder
}

// MockPromptBuilderMockRecorder is the mock recorder for MockPromptBuilder.
type MockPromptBuilderMockRecorder struct {
	mock *MockPromptBuilder
}

// NewMockPromptBuilder creates a new mock instance.
func NewMockPromptBuilder(ctrl *gomock.Controller) *MockPromptBuilder {
	mock := &MockPromptBuilder{ctrl: ctrl}
	mock.recorder = &MockPromptBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptBuilder) EXPECT() *MockPromptBuilderMockRecorder {
	return m.recorder
}

// BuildPrompt mocks base method.
func (m *MockPromptBuilder) BuildPrompt(ctx context.Context, analysisType models.AnalysisType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPrompt", ctx, analysisType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildPrompt indicates an expected call of BuildPrompt.
func (mr *MockPromptBuilderMockRecorder) BuildPrompt(ctx, analysisType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPrompt", reflect.TypeOf((*MockPromptBuilder)(nil).BuildPrompt), ctx, analysisType)
}
