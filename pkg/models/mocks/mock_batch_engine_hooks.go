// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amaurybrisou/mosychlos/pkg/models (interfaces: BatchEngineHooks)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	bag "github.com/amaurybrisou/mosychlos/pkg/bag"
	models "github.com/amaurybrisou/mosychlos/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBatchEngineHooks is a mock of BatchEngineHooks interface.
type MockBatchEngineHooks struct {
	ctrl     *gomock.Controller
	recorder *MockBatchEngineHooksMockRecorder
}

// MockBatchEngineHooksMockRecorder is the mock recorder for MockBatchEngineHooks.
type MockBatchEngineHooksMockRecorder struct {
	mock *MockBatchEngineHooks
}

// NewMockBatchEngineHooks creates a new mock instance.
func NewMockBatchEngineHooks(ctrl *gomock.Controller) *MockBatchEngineHooks {
	mock := &MockBatchEngineHooks{ctrl: ctrl}
	mock.recorder = &MockBatchEngineHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchEngineHooks) EXPECT() *MockBatchEngineHooksMockRecorder {
	return m.recorder
}

// GenerateCustomID mocks base method.
func (m *MockBatchEngineHooks) GenerateCustomID(arg0, arg1 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCustomID", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateCustomID indicates an expected call of GenerateCustomID.
func (mr *MockBatchEngineHooksMockRecorder) GenerateCustomID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCustomID", reflect.TypeOf((*MockBatchEngineHooks)(nil).GenerateCustomID), arg0, arg1)
}

// GetInitialPrompt mocks base method.
func (m *MockBatchEngineHooks) GetInitialPrompt(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialPrompt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitialPrompt indicates an expected call of GetInitialPrompt.
func (mr *MockBatchEngineHooksMockRecorder) GetInitialPrompt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialPrompt", reflect.TypeOf((*MockBatchEngineHooks)(nil).GetInitialPrompt), arg0)
}

// PostIteration mocks base method.
func (m *MockBatchEngineHooks) PostIteration(arg0 int, arg1 *models.BatchResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostIteration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostIteration indicates an expected call of PostIteration.
func (mr *MockBatchEngineHooksMockRecorder) PostIteration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostIteration", reflect.TypeOf((*MockBatchEngineHooks)(nil).PostIteration), arg0, arg1)
}

// PreIteration mocks base method.
func (m *MockBatchEngineHooks) PreIteration(arg0 int, arg1 []models.BatchJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreIteration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreIteration indicates an expected call of PreIteration.
func (mr *MockBatchEngineHooksMockRecorder) PreIteration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreIteration", reflect.TypeOf((*MockBatchEngineHooks)(nil).PreIteration), arg0, arg1)
}

// ProcessFinalResult mocks base method.
func (m *MockBatchEngineHooks) ProcessFinalResult(arg0, arg1 string, arg2 bag.SharedBag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessFinalResult", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessFinalResult indicates an expected call of ProcessFinalResult.
func (mr *MockBatchEngineHooksMockRecorder) ProcessFinalResult(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFinalResult", reflect.TypeOf((*MockBatchEngineHooks)(nil).ProcessFinalResult), arg0, arg1, arg2)
}

// ProcessToolResult mocks base method.
func (m *MockBatchEngineHooks) ProcessToolResult(arg0, arg1, arg2 string, arg3 bag.SharedBag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessToolResult", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessToolResult indicates an expected call of ProcessToolResult.
func (mr *MockBatchEngineHooksMockRecorder) ProcessToolResult(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessToolResult", reflect.TypeOf((*MockBatchEngineHooks)(nil).ProcessToolResult), arg0, arg1, arg2, arg3)
}

// ResultKey mocks base method.
func (m *MockBatchEngineHooks) ResultKey() bag.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResultKey")
	ret0, _ := ret[0].(bag.Key)
	return ret0
}

// ResultKey indicates an expected call of ResultKey.
func (mr *MockBatchEngineHooksMockRecorder) ResultKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResultKey", reflect.TypeOf((*MockBatchEngineHooks)(nil).ResultKey))
}

// ShouldContinueIteration mocks base method.
func (m *MockBatchEngineHooks) ShouldContinueIteration(arg0 int, arg1 []models.BatchJob) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldContinueIteration", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldContinueIteration indicates an expected call of ShouldContinueIteration.
func (mr *MockBatchEngineHooksMockRecorder) ShouldContinueIteration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldContinueIteration", reflect.TypeOf((*MockBatchEngineHooks)(nil).ShouldContinueIteration), arg0, arg1)
}
